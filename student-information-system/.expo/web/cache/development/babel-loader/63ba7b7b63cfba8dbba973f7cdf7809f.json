{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\projects\\\\student-information-system\\\\student-information-system\\\\App.js\";\nimport React, { useState } from 'react';\nimport { AppLoading } from 'expo';\nimport { Provider } from 'react-redux';\nimport { loadFonts } from \"./styles/fonts\";\nimport { UIComonentProvider } from \"./utils/UIComonentProvider\";\nimport { RootDrawer } from \"./navigation/RootDrawer\";\nimport store from \"./redux\";\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      ready = _useState2[0],\n      setReady = _useState2[1];\n\n  if (!ready) {\n    return React.createElement(AppLoading, {\n      startAsync: loadFonts,\n      onFinish: function onFinish() {\n        return setReady(true);\n      },\n      onError: function onError(err) {\n        return console.log('AppLoading err', err);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 4\n      }\n    });\n  }\n\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 3\n    }\n  }, React.createElement(UIComonentProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 4\n    }\n  }, React.createElement(RootDrawer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  })));\n}","map":{"version":3,"sources":["D:/projects/student-information-system/student-information-system/App.js"],"names":["React","useState","AppLoading","Provider","loadFonts","UIComonentProvider","RootDrawer","store","App","ready","setReady","err","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,SAASC,SAAT;AACA,SAASC,kBAAT;AACA,SAASC,UAAT;AACA,OAAOC,KAAP;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBAEDP,QAAQ,CAAC,KAAD,CAFP;AAAA;AAAA,MAErBQ,KAFqB;AAAA,MAEdC,QAFc;;AAI7B,MAAI,CAACD,KAAL,EAAY;AACX,WACC,oBAAC,UAAD;AACC,MAAA,UAAU,EAAEL,SADb;AAEC,MAAA,QAAQ,EAAE;AAAA,eAAMM,QAAQ,CAAC,IAAD,CAAd;AAAA,OAFX;AAGC,MAAA,OAAO,EAAE,iBAACC,GAAD;AAAA,eAASC,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,GAA9B,CAAT;AAAA,OAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAQA;;AACD,SACC,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEJ,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD,CADD;AAOA","sourcesContent":["import React, { useState } from 'react';\r\nimport { AppLoading } from 'expo';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { loadFonts } from './styles/fonts';\r\nimport { UIComonentProvider } from './utils/UIComonentProvider';\r\nimport { RootDrawer } from './navigation/RootDrawer';\r\nimport store from './redux';\r\n\r\nexport default function App() {\r\n\t//a state for determining wether fonst are installes or not\r\n\tconst [ ready, setReady ] = useState(false);\r\n\t//is fonts r't insatlled install them and then return rootdrawer\r\n\tif (!ready) {\r\n\t\treturn (\r\n\t\t\t<AppLoading\r\n\t\t\t\tstartAsync={loadFonts}\r\n\t\t\t\tonFinish={() => setReady(true)}\r\n\t\t\t\tonError={(err) => console.log('AppLoading err', err)}\r\n\t\t\t\t//todo handele err\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\treturn (\r\n\t\t<Provider store={store}>\r\n\t\t\t<UIComonentProvider>\r\n\t\t\t\t<RootDrawer />\r\n\t\t\t</UIComonentProvider>\r\n\t\t</Provider>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}