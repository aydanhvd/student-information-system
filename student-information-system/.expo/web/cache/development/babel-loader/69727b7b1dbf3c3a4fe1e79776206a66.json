{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\student-information-system\\\\student-information-system\\\\node_modules\\\\react-native-calendar-picker\\\\CalendarPicker\\\\DaysGridView.js\";\nimport React from 'react';\nimport uuid from 'uuid/v4';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport RNViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport PropTypes from 'prop-types';\nimport Day from \"./Day\";\nimport EmptyDay from \"./EmptyDay\";\nimport { Utils } from \"./Utils\";\nimport moment from 'moment';\nvar ViewPropTypes = RNViewPropTypes || View.propTypes;\nexport default function DaysGridView(props) {\n  var month = props.month,\n      year = props.year,\n      styles = props.styles,\n      onPressDay = props.onPressDay,\n      startFromMonday = props.startFromMonday,\n      selectedStartDate = props.selectedStartDate,\n      selectedEndDate = props.selectedEndDate,\n      allowRangeSelection = props.allowRangeSelection,\n      allowBackwardRangeSelect = props.allowBackwardRangeSelect,\n      textStyle = props.textStyle,\n      todayTextStyle = props.todayTextStyle,\n      selectedDayStyle = props.selectedDayStyle,\n      selectedRangeStartStyle = props.selectedRangeStartStyle,\n      selectedRangeStyle = props.selectedRangeStyle,\n      selectedRangeEndStyle = props.selectedRangeEndStyle,\n      customDatesStyles = props.customDatesStyles,\n      minDate = props.minDate,\n      maxDate = props.maxDate,\n      disabledDates = props.disabledDates,\n      disabledDatesTextStyle = props.disabledDatesTextStyle,\n      minRangeDuration = props.minRangeDuration,\n      maxRangeDuration = props.maxRangeDuration,\n      enableDateChange = props.enableDateChange,\n      showDayStragglers = props.showDayStragglers;\n  var totalDays = Utils.getDaysInMonth(month, year);\n  var totalDaysPrevMonth, prevMonth, prevMonthYear, dayNextMonth;\n\n  if (showDayStragglers) {\n    prevMonth = month - 1;\n    prevMonthYear = year;\n\n    if (prevMonth < 0) {\n      prevMonth = 11;\n      prevMonthYear--;\n    }\n\n    totalDaysPrevMonth = Utils.getDaysInMonth(prevMonth, prevMonthYear);\n    dayNextMonth = 1;\n  }\n\n  var firstDayOfMonth = moment({\n    year: year,\n    month: month,\n    day: 1\n  });\n  var firstWeekDay = firstDayOfMonth.isoWeekday();\n  var days = Array.apply(null, {\n    length: totalDays\n  }).map(Number.call, Number);\n  var dayArray = [0, 1, 2, 3, 4, 5, 6];\n  var weekArray = [0, 1, 2, 3, 4, 5];\n  var startIndex = (startFromMonday ? firstWeekDay - 1 : firstWeekDay) % 7;\n\n  function renderDayInCurrentMonth() {\n    var day = days.shift() + 1;\n    return React.createElement(Day, {\n      key: day,\n      day: day,\n      month: month,\n      year: year,\n      styles: styles,\n      onPressDay: onPressDay,\n      selectedStartDate: selectedStartDate,\n      selectedEndDate: selectedEndDate,\n      allowRangeSelection: allowRangeSelection,\n      allowBackwardRangeSelect: allowBackwardRangeSelect,\n      minDate: minDate,\n      maxDate: maxDate,\n      disabledDates: disabledDates,\n      disabledDatesTextStyle: disabledDatesTextStyle,\n      minRangeDuration: minRangeDuration,\n      maxRangeDuration: maxRangeDuration,\n      textStyle: textStyle,\n      todayTextStyle: todayTextStyle,\n      selectedDayStyle: selectedDayStyle,\n      selectedRangeStartStyle: selectedRangeStartStyle,\n      selectedRangeStyle: selectedRangeStyle,\n      selectedRangeEndStyle: selectedRangeEndStyle,\n      customDatesStyles: customDatesStyles,\n      enableDateChange: enableDateChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    });\n  }\n\n  function renderDayStraggler(_ref) {\n    var key = _ref.key,\n        day = _ref.day;\n    return React.createElement(Day, {\n      key: key,\n      day: day,\n      styles: styles,\n      disabledDates: function disabledDates() {\n        return true;\n      },\n      disabledDatesTextStyle: disabledDatesTextStyle,\n      textStyle: textStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }\n    });\n  }\n\n  function generateDatesForWeek(i) {\n    var lastFilledRow = 0;\n    return dayArray.map(function (dayIndex) {\n      if (i === 0) {\n        if (dayIndex >= startIndex) {\n          if (days.length > 0) {\n            return renderDayInCurrentMonth();\n          }\n        } else {\n          return showDayStragglers ? renderDayStraggler({\n            key: '' + i + dayIndex,\n            day: totalDaysPrevMonth - startIndex + dayIndex + 1\n          }) : React.createElement(EmptyDay, {\n            key: uuid(),\n            styles: styles,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }\n          });\n        }\n      } else {\n        if (days.length > 0) {\n          lastFilledRow = i;\n          return renderDayInCurrentMonth();\n        } else if (showDayStragglers && i <= lastFilledRow) {\n          return renderDayStraggler({\n            key: '' + i + dayIndex,\n            day: dayNextMonth++\n          });\n        }\n      }\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.daysWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }\n  }, weekArray.map(function (weekIndexOfMonth) {\n    return React.createElement(View, {\n      key: weekIndexOfMonth,\n      style: styles.weekRow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }, generateDatesForWeek(weekIndexOfMonth));\n  }));\n}\nDaysGridView.propTypes = {\n  styles: PropTypes.shape(),\n  month: PropTypes.number.isRequired,\n  year: PropTypes.number.isRequired,\n  onPressDay: PropTypes.func,\n  startFromMonday: PropTypes.bool,\n  selectedDayStyle: ViewPropTypes.style,\n  selectedRangeStartStyle: ViewPropTypes.style,\n  selectedRangeStyle: ViewPropTypes.style,\n  selectedRangeEndStyle: ViewPropTypes.style,\n  todayTextStyle: Text.propTypes.style,\n  customDatesStyles: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date), PropTypes.instanceOf(moment)]),\n    containerStyle: ViewPropTypes.style,\n    style: ViewPropTypes.style,\n    textStyle: Text.propTypes.style\n  })),\n  disabledDates: PropTypes.oneOfType([PropTypes.array, PropTypes.func]),\n  disabledDatesTextStyle: Text.propTypes.style,\n  minRangeDuration: PropTypes.oneOfType([PropTypes.array, PropTypes.number]),\n  maxRangeDuration: PropTypes.oneOfType([PropTypes.array, PropTypes.number])\n};","map":{"version":3,"sources":["D:/projects/student-information-system/student-information-system/node_modules/react-native-calendar-picker/CalendarPicker/DaysGridView.js"],"names":["React","uuid","PropTypes","Day","EmptyDay","Utils","moment","ViewPropTypes","RNViewPropTypes","View","propTypes","DaysGridView","props","month","year","styles","onPressDay","startFromMonday","selectedStartDate","selectedEndDate","allowRangeSelection","allowBackwardRangeSelect","textStyle","todayTextStyle","selectedDayStyle","selectedRangeStartStyle","selectedRangeStyle","selectedRangeEndStyle","customDatesStyles","minDate","maxDate","disabledDates","disabledDatesTextStyle","minRangeDuration","maxRangeDuration","enableDateChange","showDayStragglers","totalDays","getDaysInMonth","totalDaysPrevMonth","prevMonth","prevMonthYear","dayNextMonth","firstDayOfMonth","day","firstWeekDay","isoWeekday","days","Array","apply","length","map","Number","call","dayArray","weekArray","startIndex","renderDayInCurrentMonth","shift","renderDayStraggler","key","generateDatesForWeek","i","lastFilledRow","dayIndex","daysWrapper","weekIndexOfMonth","weekRow","shape","number","isRequired","func","bool","style","Text","arrayOf","date","oneOfType","string","instanceOf","Date","containerStyle","array"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport uuid from 'uuid/v4';\r\nimport {\r\n  View,\r\n  Text,\r\n  ViewPropTypes as RNViewPropTypes,\r\n} from 'react-native';\r\nimport PropTypes from 'prop-types';\r\nimport Day from './Day';\r\nimport EmptyDay from './EmptyDay';\r\nimport { Utils } from './Utils';\r\nimport moment from 'moment';\r\n\r\nconst ViewPropTypes = RNViewPropTypes || View.propTypes;\r\n\r\nexport default function DaysGridView(props) {\r\n  const {\r\n    month,\r\n    year,\r\n    styles,\r\n    onPressDay,\r\n    startFromMonday,\r\n    selectedStartDate,\r\n    selectedEndDate,\r\n    allowRangeSelection,\r\n    allowBackwardRangeSelect,\r\n    textStyle,\r\n    todayTextStyle,\r\n    selectedDayStyle,\r\n    selectedRangeStartStyle,\r\n    selectedRangeStyle,\r\n    selectedRangeEndStyle,\r\n    customDatesStyles,\r\n    minDate,\r\n    maxDate,\r\n    disabledDates,\r\n    disabledDatesTextStyle,\r\n    minRangeDuration,\r\n    maxRangeDuration,\r\n    enableDateChange,\r\n    showDayStragglers,\r\n  } = props;\r\n\r\n  // let's get the total of days in this month, we need the year as well, since\r\n  // leap years have different amount of days in February\r\n  const totalDays = Utils.getDaysInMonth(month, year);\r\n\r\n  // Calculate days in prev month for day stragglers.\r\n  let totalDaysPrevMonth, prevMonth, prevMonthYear, dayNextMonth;\r\n  if (showDayStragglers) {\r\n    prevMonth = month - 1;\r\n    prevMonthYear = year;\r\n    if (prevMonth < 0) {\r\n      prevMonth = 11;\r\n      prevMonthYear--;\r\n    }\r\n    totalDaysPrevMonth = Utils.getDaysInMonth(prevMonth, prevMonthYear);\r\n    // Next month's day always starts at 1 and never overflows\r\n    dayNextMonth = 1;\r\n  }\r\n\r\n  // Let's create a date for day one of the current given month and year\r\n  const firstDayOfMonth = moment({ year, month, day: 1 });\r\n\r\n  // isoWeekday() gets the ISO day of the week with 1 being Monday and 7 being Sunday.\r\n  // We will need this to know what day of the week to show day 1\r\n  // See https://github.com/stephy/CalendarPicker/issues/49\r\n  const firstWeekDay = firstDayOfMonth.isoWeekday();\r\n\r\n  // fill up an array of days with the amount of days in the current month\r\n  const days = Array.apply(null, {length: totalDays}).map(Number.call, Number);\r\n\r\n  // 7 days in a week.\r\n  const dayArray = [ 0, 1, 2, 3, 4, 5, 6 ];\r\n\r\n  // There can be 4 to 6 rows of weeks in a month.\r\n  const weekArray = [ 0, 1, 2, 3, 4, 5 ];\r\n\r\n  // Get the starting index, based upon whether we are using monday or sunday as first day.\r\n  const startIndex = (startFromMonday ? firstWeekDay - 1 : firstWeekDay) % 7;\r\n\r\n  function renderDayInCurrentMonth() {\r\n    const day = days.shift() + 1;\r\n    return (\r\n      <Day\r\n        key={day}\r\n        day={day}\r\n        month={month}\r\n        year={year}\r\n        styles={styles}\r\n        onPressDay={onPressDay}\r\n        selectedStartDate={selectedStartDate}\r\n        selectedEndDate={selectedEndDate}\r\n        allowRangeSelection={allowRangeSelection}\r\n        allowBackwardRangeSelect={allowBackwardRangeSelect}\r\n        minDate={minDate}\r\n        maxDate={maxDate}\r\n        disabledDates={disabledDates}\r\n        disabledDatesTextStyle={disabledDatesTextStyle}\r\n        minRangeDuration={minRangeDuration}\r\n        maxRangeDuration={maxRangeDuration}\r\n        textStyle={textStyle}\r\n        todayTextStyle={todayTextStyle}\r\n        selectedDayStyle={selectedDayStyle}\r\n        selectedRangeStartStyle={selectedRangeStartStyle}\r\n        selectedRangeStyle={selectedRangeStyle}\r\n        selectedRangeEndStyle={selectedRangeEndStyle}\r\n        customDatesStyles={customDatesStyles}\r\n        enableDateChange={enableDateChange}\r\n      />\r\n    );\r\n  }\r\n\r\n  function renderDayStraggler({key, day}) {\r\n    return (\r\n      <Day\r\n        key={key}\r\n        day={day}\r\n        styles={styles}\r\n        disabledDates={() => true}\r\n        disabledDatesTextStyle={disabledDatesTextStyle}\r\n        textStyle={textStyle}\r\n      />\r\n    );\r\n  }\r\n\r\n\r\n  function generateDatesForWeek(i) {\r\n    let lastFilledRow = 0;\r\n    return dayArray.map(dayIndex => {\r\n      if (i === 0) {\r\n        // first row: start current month's day on the correct weekday\r\n        if (dayIndex >= startIndex) {\r\n          if (days.length > 0) {\r\n            return renderDayInCurrentMonth();\r\n          }\r\n        } else {\r\n          return showDayStragglers ?\r\n            // Show previous month's days\r\n            renderDayStraggler({\r\n              key: '' + i + dayIndex,\r\n              day: totalDaysPrevMonth - startIndex + dayIndex + 1,\r\n            })\r\n            :\r\n            ( //... otherwise blank\r\n              <EmptyDay\r\n                key={uuid()}\r\n                styles={styles}\r\n              />\r\n            );\r\n        }\r\n      } else {\r\n        if (days.length > 0) {\r\n          lastFilledRow = i;\r\n          return renderDayInCurrentMonth();\r\n        }\r\n        else if (showDayStragglers && i <= lastFilledRow) {\r\n          // Show next month's days\r\n          return renderDayStraggler({\r\n            key: '' + i + dayIndex,\r\n            day: dayNextMonth++,\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <View style={styles.daysWrapper}>\r\n      { weekArray.map(weekIndexOfMonth => (\r\n        <View key={weekIndexOfMonth} style={styles.weekRow}>\r\n          { generateDatesForWeek(weekIndexOfMonth) }\r\n        </View>\r\n      ))\r\n      }\r\n    </View>\r\n  );\r\n}\r\n\r\nDaysGridView.propTypes = {\r\n  styles: PropTypes.shape(),\r\n  month: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  onPressDay: PropTypes.func,\r\n  startFromMonday: PropTypes.bool,\r\n  selectedDayStyle: ViewPropTypes.style,\r\n  selectedRangeStartStyle: ViewPropTypes.style,\r\n  selectedRangeStyle: ViewPropTypes.style,\r\n  selectedRangeEndStyle: ViewPropTypes.style,\r\n  todayTextStyle: Text.propTypes.style,\r\n  customDatesStyles: PropTypes.arrayOf(PropTypes.shape({\r\n    date: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.instanceOf(Date),\r\n      PropTypes.instanceOf(moment)\r\n    ]),\r\n    containerStyle: ViewPropTypes.style,\r\n    style: ViewPropTypes.style,\r\n    textStyle: Text.propTypes.style,\r\n  })),\r\n  disabledDates: PropTypes.oneOfType([PropTypes.array, PropTypes.func]),\r\n  disabledDatesTextStyle: Text.propTypes.style,\r\n  minRangeDuration: PropTypes.oneOfType([PropTypes.array, PropTypes.number]),\r\n  maxRangeDuration: PropTypes.oneOfType([PropTypes.array, PropTypes.number]),\r\n};\r\n"]},"metadata":{},"sourceType":"module"}