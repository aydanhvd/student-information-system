{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Permissions from 'expo-permissions';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nexport function askForCameraPermissions() {\n  var _await$Permissions$as, ios_status, _await$Permissions$as2, result;\n\n  return _regeneratorRuntime.async(function askForCameraPermissions$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n\n          if (!(Platform.OS === 'ios')) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA_ROLL));\n\n        case 4:\n          _await$Permissions$as = _context.sent;\n          ios_status = _await$Permissions$as.ios_status;\n          console.log({\n            ios_status: ios_status\n          });\n\n          if (!(ios_status !== 'granted')) {\n            _context.next = 10;\n            break;\n          }\n\n          Alert.alert('Fail', 'Sorry, we need camera roll permissions to make this work!');\n          return _context.abrupt(\"return\", false);\n\n        case 10:\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAM));\n\n        case 12:\n          _await$Permissions$as2 = _context.sent;\n          result = _await$Permissions$as2.result;\n\n          if (!(result === 'granted')) {\n            _context.next = 18;\n            break;\n          }\n\n          return _context.abrupt(\"return\", true);\n\n        case 18:\n          Alert.alert('Insufficient permissions!', 'You need to grant camera permissions to use this app.', [{\n            text: 'Okay'\n          }]);\n          return _context.abrupt(\"return\", false);\n\n        case 20:\n          _context.next = 25;\n          break;\n\n        case 22:\n          _context.prev = 22;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('askForCameraPermissions err', _context.t0);\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 22]], Promise);\n}","map":{"version":3,"sources":["D:/projects/student-information-system/student-information-system/utils/askForCameraPermissions.js"],"names":["Permissions","askForCameraPermissions","Platform","OS","askAsync","CAMERA_ROLL","ios_status","console","log","Alert","alert","CAM","result","text"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,kBAA7B;;;AAGA,OAAO,SAAeC,uBAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAEDC,QAAQ,CAACC,EAAT,KAAgB,KAFf;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAIyBH,WAAW,CAACI,QAAZ,CAAqBJ,WAAW,CAACK,WAAjC,CAJzB;;AAAA;AAAA;AAIIC,UAAAA,UAJJ,yBAIIA,UAJJ;AAKJC,UAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,YAAAA,UAAU,EAAVA;AAAD,WAAZ;;AALI,gBAMAA,UAAU,KAAK,SANf;AAAA;AAAA;AAAA;;AAOHG,UAAAA,KAAK,CAACC,KAAN,CAAY,MAAZ,EAAoB,2DAApB;AAPG,2CAQI,KARJ;;AAAA;AAAA;AAAA,2CAaoBV,WAAW,CAACI,QAAZ,CAAqBJ,WAAW,CAACW,GAAjC,CAbpB;;AAAA;AAAA;AAaGC,UAAAA,MAbH,0BAaGA,MAbH;;AAAA,gBAcDA,MAAM,KAAK,SAdV;AAAA;AAAA;AAAA;;AAAA,2CAeG,IAfH;;AAAA;AAiBJH,UAAAA,KAAK,CAACC,KAAN,CAAY,2BAAZ,EAAyC,uDAAzC,EAAkG,CACjG;AAAEG,YAAAA,IAAI,EAAE;AAAR,WADiG,CAAlG;AAjBI,2CAoBG,KApBH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuBLN,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;;AAvBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as Permissions from 'expo-permissions';\r\nimport { Platform, Alert } from 'react-native';\r\n\r\nexport async function askForCameraPermissions() {\r\n\ttry {\r\n\t\tif (Platform.OS === 'ios') {\r\n\t\t\t//for IOS we need also CAMERA_ROLL\r\n\t\t\tconst { ios_status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);\r\n\t\t\tconsole.log({ios_status})\r\n\t\t\tif (ios_status !== 'granted') {\r\n\t\t\t\tAlert.alert('Fail', 'Sorry, we need camera roll permissions to make this work!');\r\n\t\t\t\treturn false;\r\n\t\t\t\t//todo handele error\r\n\t\t\t}\r\n\t\t}\r\n\t\t//for both Android and IOS\r\n\t\tconst { result } = await Permissions.askAsync(Permissions.CAM);\r\n\t\tif (result === 'granted') {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tAlert.alert('Insufficient permissions!', 'You need to grant camera permissions to use this app.', [\r\n\t\t\t\t{ text: 'Okay' }\r\n\t\t\t]);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log('askForCameraPermissions err', err);\r\n\t\t//todo handle error\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}